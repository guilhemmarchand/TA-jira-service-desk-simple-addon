<form>
  <label>REST API explore</label>
  <fieldset submitButton="false"></fieldset>
  <row>
    <panel>
      <html>
        <h1>JIRA Rest API</h1>

        <h2>Use the custom command <code>| jirarest target="&lt;endpoint&gt;"</code> to perform an HTTP rest call against any endpoint of your JIRA instance.<br />The default method is GET, but you can as well perform PUT, POST and DELETE calls using the <code>method</code> argument and the <code>json_request</code> if the API endpoint requires data to be provided</h2>
        
        <h3>For API references:</h3>
        
        <a href="https://docs.atlassian.com/software/jira/docs/api/REST/latest/#api/2/issue-getIssue">Jira Server platform REST API reference</a>

        <h3>Add-on documentation page:</h3>
        
        <a href="https://ta-jira-service-desk-simple-addon.readthedocs.io/en/latest/userguide.html#jira-rest-api-get-wrapper">REST wrapper documentation on Read the docs</a>

      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Try your own:</title>
      <title>| jirarest target="rest/api/2/serverInfo" method="GET"</title>
      <input type="text" token="tk_rest" searchWhenChanged="true">
        <label></label>
        <default>rest/api/2/myself</default>
        <prefix>| jirarest target="</prefix>
        <suffix>" method="GET" | spath</suffix>
        <initialValue>rest/api/2/myself</initialValue>
      </input>
      <event>
        <search>
          <query>$tk_rest$</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="count">20</option>
        <option name="list.drilldown">none</option>
        <option name="list.wrap">1</option>
        <option name="maxLines">5</option>
        <option name="raw.drilldown">none</option>
        <option name="refresh.display">progressbar</option>
        <option name="rowNumbers">0</option>
        <option name="table.drilldown">none</option>
        <option name="table.sortDirection">asc</option>
        <option name="table.wrap">1</option>
        <option name="type">list</option>
      </event>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h1>Use REST and JQL to get the total number of issues per project, per status category and calculate percentages in each status (dynamically list the projects and iterate using the map command):</h1>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>You can use the JQL language and perform any advanced query in JIRA, the following example returns the number of issues per project: api/2/search?jql=project=&lt;my project&gt;&amp;maxResults=0</title>
      <table>
        <search>
          <query>| jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no

| map [ | jirarest target="rest/api/2/search?jql=project=$$key$$&amp;maxResults=0" method="GET" ] | streamstats count as result_no | rex field=_raw "\"total\":\s(?&lt;total_issues&gt;\d*)"
| append [ 
| jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no
| map [ | jirarest target="rest/api/2/search?jql=project=$$key$$%20AND%20statuscategory%20IN%20%28%22Done%22%29&amp;maxResults=0" ] | streamstats count as result_no | rex field=_raw "\"total\":\s(?&lt;total_done&gt;\d*)"
]
| append [ 
| jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no
| map [ | jirarest target="rest/api/2/search?jql=project=$$key$$%20AND%20statuscategory%20IN%20%28%22To%20Do%22%29&amp;maxResults=0" ] | streamstats count as result_no | rex field=_raw "\"total\":\s(?&lt;total_to_do&gt;\d*)"
]
| append [ 
| jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no
| map [ | jirarest target="rest/api/2/search?jql=project=$$key$$%20AND%20statuscategory%20IN%20%28%22In%20Progress%22%29&amp;maxResults=0" ] | streamstats count as result_no | rex field=_raw "\"total\":\s(?&lt;total_in_progress&gt;\d*)"
]
| append [ | jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no ]
| eval line_merge=case(isnum(project_no), project_no, isnum(result_no), result_no)
| stats first(key) as project, first(total_*) as "total_*" by line_merge | fields - line_merge

| eval pct_total_done="% " . round(total_done/total_issues*100, 2), pct_total_to_do="% " . round(total_to_do/total_issues*100, 2), pct_total_in_progress="% " . round(total_in_progress/total_issues*100, 2)
| foreach pct_* [ eval &lt;&lt;FIELD&gt;&gt; = if(isnull('&lt;&lt;FIELD&gt;&gt;'), "% 0.00", '&lt;&lt;FIELD&gt;&gt;' ) ]

| eval _time=now() | fields _time, project, pct_*, total_*</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="drilldown">none</option>
        <option name="percentagesRow">false</option>
        <option name="refresh.display">progressbar</option>
        <option name="totalsRow">true</option>
        <format type="color" field="total_done">
          <colorPalette type="minMidMax" maxColor="#006D9C" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="total_in_progress">
          <colorPalette type="minMidMax" maxColor="#006D9C" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="total_issues">
          <colorPalette type="minMidMax" maxColor="#006D9C" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
        <format type="color" field="total_to_do">
          <colorPalette type="minMidMax" maxColor="#006D9C" minColor="#FFFFFF"></colorPalette>
          <scale type="minMidMax"></scale>
        </format>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h1>Use REST and JQL to get the total number of issues per project (dynamically list the projects and iterate using the map command):</h1>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>You can use the JQL language and perform any advanced query in JIRA, the following example returns the number of issues per project: api/2/search?jql=project=&lt;my project&gt;&amp;maxResults=0</title>
      <table>
        <search>
          <query>| jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no
| map [ | jirarest target="rest/api/2/search?jql=project=$$key$$&amp;maxResults=0" method="GET" ] | streamstats count as result_no
| append [ | jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no ]
| eval line_merge=case(isnum(project_no), project_no, isnum(result_no), result_no)
| stats first(_time) as _time, first(key) as project, first(_raw) as _raw by line_merge | fields - line_merge</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h1>Use REST and JQL to get the number of issues that are resolved (status category "Done") per project:</h1>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Get the number of issues per project in the status category "Done"</title>
      <table>
        <search>
          <query>| jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no
| map [ | jirarest target="rest/api/2/search?jql=project=$$key$$%20AND%20statuscategory%20IN%20%28%22Done%22%29&amp;maxResults=0" method="GET" ] | streamstats count as result_no
| append [ | jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no ]
| eval line_merge=case(isnum(project_no), project_no, isnum(result_no), result_no)
| stats first(_time) as _time, first(key) as project, first(_raw) as _raw by line_merge | fields - line_merge</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <html>
        <h1>Use REST and JQL to get the number of issues that are not resolved (status category "To Do" or "In Progress") per project:</h1>
      </html>
    </panel>
  </row>
  <row>
    <panel>
      <title>Get the number of issues per project in the status category "Done"</title>
      <table>
        <search>
          <query>| jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no
| map [ | jirarest target="rest/api/2/search?jql=project=$$key$$%20AND%20statuscategory%20IN%20%28%22To%20Do%22%2C%20%22In%20Progress%22%29&amp;maxResults=0" method="GET" ] | streamstats count as result_no
| append [ | jirarest target="rest/api/2/project" method="GET" | spath | rename "{}.key" as key | table key | mvexpand key | streamstats count as project_no ]
| eval line_merge=case(isnum(project_no), project_no, isnum(result_no), result_no)
| stats first(_time) as _time, first(key) as project, first(_raw) as _raw by line_merge | fields - line_merge</query>
          <earliest>-24h@h</earliest>
          <latest>now</latest>
          <sampleRatio>1</sampleRatio>
        </search>
        <option name="drilldown">none</option>
        <option name="refresh.display">progressbar</option>
      </table>
    </panel>
  </row>
</form>